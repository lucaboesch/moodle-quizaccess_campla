{"version":3,"file":"modalforms.min.js","sources":["../src/modalforms.js"],"sourcesContent":["import ModalForm from 'core_form/modalform';\nimport Ajax from 'core/ajax';\nimport {add as addToast} from 'core/toast';\nimport {getString} from 'core/str';\nimport Notification from 'core/notification';\n\nconst addNotification = (msg, type) => {\n    addToast(msg, {type: type});\n};\n\n/**\n * Open a dynamic modal form and, upon open, fetch/store the CAMPLA AWT token via AJAX.\n *\n * @param {string} linkSelector CSS selector for the trigger element\n * @param {string} formClass Fully-qualified PHP form class name (e.g. 'quizaccess_campla\\\\form\\\\sendtocamplaform')\n * @param {string} title Modal title\n * @param {Object} args Arguments passed to the form (e.g., {cmid, hidebuttons})\n */\n\n\n/** ---- Toast z-index fallback: inject CSS once per page ---- */\nconst ensureToastZIndexCSS = (() => {\n    let injected = false;\n    const STYLE_ID = 'campla-toast-zindex-css';\n    return function ensureToastZIndexCSS() {\n        if (injected || document.getElementById(STYLE_ID)) {\n            injected = true;\n            return;\n        }\n        const style = document.createElement('style');\n        style.id = STYLE_ID;\n        style.textContent = `\n            .toast-wrapper, .toast-container {\n                z-index: 2000 !important; /* above modal/backdrop */\n            }\n            .toast { pointer-events: auto; }\n        `;\n        document.head.appendChild(style);\n        injected = true;\n    };\n})();\n\n// Inject immediately so it’s ready before any toast is shown.\nensureToastZIndexCSS();\n\nexport const modalForm = (linkSelector, formClass, title, args = {...args, hidebuttons: args.hidebuttons ?? 1}) => {\n    // Ensure default: hidebuttons = 1 unless explicitly disabled.\n    args.hidebuttons = (args.hidebuttons ?? 1);\n\n    const link = document.querySelector(linkSelector);\n    if (!link) {\n        return;\n    }\n\n    link.addEventListener('click', async(e) => {\n        e.preventDefault();\n\n        // REST API call when the modal is opened.\n\n        const form = new ModalForm({\n            formClass,\n            args: args,\n            modalConfig: {title: title},\n            saveButtonText: getString('sendtocampla', 'quizaccess_campla'),\n            returnFocus: e.currentTarget\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            // REST API call when form is submitted.\n            // Comes from process_dynamic_submission() in sendtocamplaform.php\n            const response = e.detail;\n            const type = response.status == 200 ? 'success' : 'danger';\n            addNotification(response.message, type);\n        });\n        form.addEventListener(form.events.ERROR, (e) => addNotification('Oopsie - ' + e.detail.message));\n\n        // Open the modal first for a snappy UX.\n        form.show();\n\n        // Then call the token endpoint.\n        try {\n            // Comes from handle_jwttoken_request() in sendtocamplaform.php\n            const [request] = await Ajax.call([{\n                methodname: 'quizaccess_campla_handle_jwttoken_request',\n                args: {}\n            }]);\n\n            const resp = await request;\n\n            // ✅ Log everything returned in resp\n            console.log('JWT token response:', resp);\n\n            // Decide toast type based on returned status\n            let toastType;\n            if (resp.status === 200) {\n                toastType = 'success';\n            } else if (resp.status === 401 || resp.status === 412) {\n                toastType = 'warning';\n            } else {\n                toastType = 'danger';\n            }\n\n            // ✅ Show the toast immediately after the request succeeds (resolved)\n            // If you want it *only* for success, wrap this in `if (resp.status === 200) { ... }`\n            addNotification(resp.message, toastType);\n\n        } catch (ex) {\n            Notification.exception(ex);\n        }\n    });\n\n};\n"],"names":["addNotification","msg","type","injected","document","getElementById","style","createElement","id","textContent","head","appendChild","ensureToastZIndexCSS","linkSelector","formClass","title","args","hidebuttons","link","querySelector","addEventListener","async","e","preventDefault","form","ModalForm","modalConfig","saveButtonText","returnFocus","currentTarget","events","FORM_SUBMITTED","response","detail","status","message","ERROR","show","request","Ajax","call","methodname","resp","toastType","console","log","ex","exception"],"mappings":"+eAMMA,gBAAkB,CAACC,IAAKC,uBACjBD,IAAK,CAACC,KAAMA,QAcI,UACrBC,UAAW,SAER,cACCA,UAAYC,SAASC,eAFZ,uCAGTF,UAAW,SAGTG,MAAQF,SAASG,cAAc,SACrCD,MAAME,GAPO,0BAQbF,MAAMG,4MAMNL,SAASM,KAAKC,YAAYL,OAC1BH,UAAW,IAjBU,EAsB7BS,sBAEyB,SAACC,aAAcC,UAAWC,oDAAOC,4DAAO,IAAIA,KAAMC,sCAAaD,KAAKC,2DAAe,GAExGD,KAAKC,uCAAeD,KAAKC,6DAAe,QAElCC,KAAOd,SAASe,cAAcN,cAC/BK,MAILA,KAAKE,iBAAiB,SAASC,MAAAA,IAC3BC,EAAEC,uBAIIC,KAAO,IAAIC,mBAAU,CACvBX,UAAAA,UACAE,KAAMA,KACNU,YAAa,CAACX,MAAOA,OACrBY,gBAAgB,kBAAU,eAAgB,qBAC1CC,YAAaN,EAAEO,gBAGnBL,KAAKJ,iBAAiBI,KAAKM,OAAOC,gBAAiBT,UAGzCU,SAAWV,EAAEW,OACb/B,KAA0B,KAAnB8B,SAASE,OAAgB,UAAY,SAClDlC,gBAAgBgC,SAASG,QAASjC,SAEtCsB,KAAKJ,iBAAiBI,KAAKM,OAAOM,OAAQd,GAAMtB,gBAAgB,YAAcsB,EAAEW,OAAOE,WAGvFX,KAAKa,iBAKMC,eAAiBC,cAAKC,KAAK,CAAC,CAC/BC,WAAY,4CACZzB,KAAM,MAGJ0B,WAAaJ,YAMfK,UAHJC,QAAQC,IAAI,sBAAuBH,MAK/BC,UADgB,MAAhBD,KAAKR,OACO,UACW,MAAhBQ,KAAKR,QAAkC,MAAhBQ,KAAKR,OACvB,UAEA,SAKhBlC,gBAAgB0C,KAAKP,QAASQ,WAEhC,MAAOG,0BACQC,UAAUD"}